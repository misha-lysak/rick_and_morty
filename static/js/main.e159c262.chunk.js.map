{"version":3,"sources":["components/Card/Card.jsx","components/EditCard/EditCard.jsx","components/CardDescription/CardDescription.jsx","components/CardList/CardList.jsx","App.jsx","api.js","index.jsx"],"names":["Card","character","handleSelect","onClick","id","className","src","image","alt","name","defaultProps","EditCard","handleOpenEdit","handleSubmit","useState","editingCharacter","setEditingCharacter","onChange","useCallback","event","target","value","prevState","onSubmit","htmlFor","type","status","species","gender","location","CardDescription","selectedCard","onDelete","isOpenEdit","setIsOpenEdit","editedCharacter","setEditedCharacter","newCharacter","close","preventDefault","to","CardList","characters","selectedCardId","setSelectedCardId","setSelectedCard","find","useEffect","path","exact","map","App","setCharacters","paginationCharacters","setPaginationCharacters","currPage","setCurrPage","searchPerson","setSearchPerson","handleChange","lowerSearch","toLocaleLowerCase","fetch","then","response","ok","Error","json","results","filter","item","includes","slice","newCharacters","state","placeholder","current","total","length","onPageChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e159c262.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Card.scss';\n\nexport const Card = ({ character, handleSelect }) => {\n  return (\n    <div\n      onClick={() => handleSelect(character.id)}\n      className=\"card\"\n    >\n      <img className=\"card__img\" src={character.image} alt={character.name} />\n      <p className=\"card__name\">{character.name}</p>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  character: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    image: PropTypes.string,\n    id: PropTypes.number,\n  }),\n  handleSelect: PropTypes.func.isRequired,\n};\n\nCard.defaultProps = {\n  character: {},\n};\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './EditCard.scss';\n\nexport const EditCard = ({ character, handleOpenEdit, handleSubmit }) => {\n  const [editingCharacter, setEditingCharacter] = useState(character);\n\n  const onChange = useCallback(\n    (event) => {\n      const { name, value } = event.target;\n\n      setEditingCharacter(prevState => ({\n        ...prevState,\n        [name]: value\n      }))\n    }, [],\n  )\n\n  return (\n    <form\n      className=\"edit-form\"\n      onSubmit={(event) => handleSubmit(event, character.id, editingCharacter, handleOpenEdit)}\n    >\n      <span\n        className=\"edit-form__close\"\n        onClick={() => handleOpenEdit()}\n      >\n        &#10008;\n      </span>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        className=\"edit-form__input\"\n        name=\"name\"\n        id=\"name\"\n        type=\"text\"\n        value={editingCharacter.name}\n        onChange={event => onChange(event)}\n      />\n      <label htmlFor=\"status\">Status</label>\n      <input\n        className=\"edit-form__input\"\n        name=\"status\"\n        id=\"status\"\n        type=\"text\"\n        value={editingCharacter.status}\n        onChange={event => onChange(event)}\n      />\n      <label htmlFor=\"species\">Species</label>\n      <input\n        className=\"edit-form__input\"\n        name=\"species\"\n        id=\"species\"\n        type=\"text\"\n        value={editingCharacter.species}\n        onChange={event => onChange(event)}\n      />\n      <label htmlFor=\"gender\">Gender</label>\n      <input\n        className=\"edit-form__input\"\n        name=\"gender\"\n        id=\"gender\"\n        type=\"text\"\n        value={editingCharacter.gender}\n        onChange={event => onChange(event)}\n      />\n      <label htmlFor=\"location\">Location</label>\n      <input\n        className=\"edit-form__input\"\n        name=\"location\"\n        id=\"location\"\n        type=\"text\"\n        value={editingCharacter.location.name}\n        onChange={event => onChange(event)}\n      />\n      <button className=\"edit-form__button\" type=\"submit\">Edit</button>\n    </form>\n  );\n};\n\nEditCard.propTypes = {\n  character: PropTypes.shape({\n    id: PropTypes.number,\n  }).isRequired,\n  handleOpenEdit: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n}\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport './CardDescription.scss';\n\nimport { EditCard } from '../EditCard/EditCard';\n\nexport const CardDescription = ({ selectedCard, onSubmit, onDelete }) => {\n  const [isOpenEdit, setIsOpenEdit] = useState(false);\n  const [editedCharacter, setEditedCharacter] = useState(selectedCard);\n\n  const handleSubmit = useCallback(\n    (event, id, newCharacter, close) => {\n      event.preventDefault();\n      setEditedCharacter(newCharacter);\n      onSubmit(event, id, newCharacter, close)\n    }, [],\n  ) \n\n  const handleOpenEdit = useCallback(\n    () => {\n      setIsOpenEdit(prevState => !prevState)\n    }, [],\n  )\n\n  return (\n    <div className=\"selected-card-description\">\n      <div className=\"selected-card\">\n        <img\n          className=\"selected-card__img\"\n          src={editedCharacter.image}\n          alt={editedCharacter.name}\n        />\n        <p className=\"selected-card__name\">\n          <span className=\"selected-card__text--left\">Name: </span>\n          <span className=\"selected-card__text--right\">{editedCharacter.name}</span>\n        </p>\n        <p className=\"selected-card__name\">\n          <span className=\"selected-card__text--left\">Status: </span>\n          <span className=\"selected-card__text--right\">{editedCharacter.status}</span>\n        </p>\n        <p className=\"selected-card__name\">\n          <span className=\"selected-card__text--left\">Species: </span>\n          <span className=\"selected-card__text--right\">{editedCharacter.species}</span>\n        </p>\n        <p className=\"selected-card__name\">\n          <span className=\"selected-card__text--left\">Gender: </span>\n          <span className=\"selected-card__text--right\">{editedCharacter.gender}</span>\n        </p>\n        {editedCharacter.location && (\n          <p className=\"selected-card__name\">\n            <span className=\"selected-card__text--left\">Location: </span>\n            <span className=\"selected-card__text--right\">{editedCharacter.location.name}</span>\n          </p>\n        )}\n        <button\n          className=\"selected-card__button\"\n          onClick={() => handleOpenEdit()}\n        >\n          Edit\n        </button>\n        <Link to=\"/\">\n          <button\n            onClick={() => onDelete(editedCharacter.id)} className=\"selected-card__button\"\n          >\n            Delete\n          </button>\n        </Link>\n      </div>\n      <Link to=\"/\">\n        <button className=\"home\">Home</button>\n      </Link>\n      {isOpenEdit && (\n        <EditCard\n          character={editedCharacter}\n          handleOpenEdit={handleOpenEdit}\n          handleSubmit={handleSubmit}\n        />\n      )}\n    </div>\n  );\n};\n\nCardDescription.propTypes = {\n  selectedCard: PropTypes.shape({\n    name: PropTypes.string,\n    status: PropTypes.string,\n    image: PropTypes.string,\n    species: PropTypes.string,\n    gender: PropTypes.string,\n    id: PropTypes.number,\n    location: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nCardDescription.defaultProps = {\n  selectedCard: {},\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CardList.scss';\n\nimport { Card } from '../Card';\nimport { CardDescription } from '../CardDescription';\nimport { Route } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nexport const CardList = ({ characters, onSubmit, onDelete }) => {\n  const [selectedCardId, setSelectedCardId] = useState(0);\n  const [selectedCard, setSelectedCard] = useState(null);\n\n  const handleSelect = useCallback(\n    (id) => {\n      setSelectedCardId(id);\n      setSelectedCard(characters.find((character) => character.id === setSelectedCardId));\n    }, [selectedCardId],\n  );\n\n  useEffect(() => {\n      setSelectedCard(characters.find(character => character.id === selectedCardId));\n  }, [selectedCardId, selectedCard]);\n\n  return (\n    <>\n      <Route path=\"/\" exact>\n        <div className=\"card-list\">\n        \n          {characters.map((character) => (\n            <Link key={character.id + 'a'} to={`/${character.name}`} >\n              <Card\n                key={character.id}\n                character={character}\n                handleSelect={handleSelect}\n              />\n            </Link>\n          ))}\n        </div>\n      </Route>\n      {selectedCard ? (\n        <Route path={`/${selectedCard.name}`} exact>\n          <CardDescription\n            selectedCard={selectedCard}\n            onSubmit={onSubmit}\n            onDelete={onDelete}\n          />\n        </Route>\n      ) : ''}\n    </>\n  );\n};\n\nCardList.propTypes = {\n  characters: PropTypes.arrayOf(\n    PropTypes.shape({\n    }),\n  ).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState, useCallback } from 'react';\nimport './App.scss';\nimport { getHaracters } from './api';\nimport { CardList } from './components/CardList';\nimport Pagination from 'react-responsive-pagination';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [paginationCharacters, setPaginationCharacters] = useState([]);\n  const [currPage, setCurrPage] = useState(1);\n  const [searchPerson, setSearchPerson] = useState('');\n\n  const handleChange = useCallback(\n    (event) => {\n      const { value } = event.target;\n      setSearchPerson(value)\n    }, []\n  )\n  \n  useEffect(() => {\n    const lowerSearch = searchPerson.toLocaleLowerCase();\n\n    getHaracters()\n      .then(response => setCharacters(\n        response.filter(item => (\n          item.name.toLocaleLowerCase().includes(lowerSearch)\n        ))\n      ));\n  }, [searchPerson]);\n\n  useEffect(() => {\n    setPaginationCharacters(characters.slice(currPage - 1, currPage + 4))\n  }, [currPage, characters])\n\n  const onSubmit = useCallback(\n    (event, id, newCharacter, close) => {\n      event.preventDefault();\n\n      const newCharacters = [...characters].filter(character => character.id !== id);\n\n      setCharacters([\n        newCharacter,\n        ...newCharacters,\n      ]);\n      close();\n    }, [characters],\n  )\n\n  const onDelete = useCallback(\n    (id) => {\n      setCharacters(prevState => \n        prevState.filter(state => state.id !== id)\n      )\n    }, [characters]\n  )\n  \n  return (\n    <div className=\"App\">\n      <div className=\"find-person\">\n        <label htmlFor=\"search\" />\n        <input\n          className='find-person__input'\n          type=\"text\"\n          name=\"search\"\n          id=\"search\" \n          placeholder=\"Find person\"\n          value={searchPerson}\n          onChange={handleChange}\n        />\n      </div>\n        <CardList\n          characters={paginationCharacters}\n          onSubmit={onSubmit}\n          onDelete={onDelete}\n        />\n        <Pagination\n          current={currPage}\n          total={characters.length - 4}\n          onPageChange={setCurrPage}\n          className='pagination'\n        />\n      </div>\n  );\n}\n\nexport default App;\n","const BASE_URL = 'https://rickandmortyapi.com/api';\n\nexport const getHaracters = () => (\n  fetch(`${BASE_URL}/character`)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error('can\\'t upload your data');\n      }\n\n      return response.json();\n    })\n    .then((response) => response.results)\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}